name: iot-service

on:
  push:
    branches:
      - "master"
  pull_request:
    branches:
      - "master"

jobs:
#  build:
#    runs-on: ubuntu-22.04
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Build Docker images
#        run: docker compose build
#
#  test:
#    runs-on: ubuntu-22.04
#    needs: build
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Python
#        uses: actions/setup-python@v5
#        with:
#          python-version: '3.12'
#
#      - name: Upgrade pip and install Poetry via pip
#        run: |
#          python -m pip install --upgrade pip
#
#      - name: Install devices-api dependencies
#        working-directory: ./devices-api
#        run: |
#          pip install -r requirements.txt
#
#      - name: Install rule-engine dependencies
#        working-directory: ./rule-engine
#        run: |
#          pip install -r requirements.txt
#
#      - name: Install metrics-api dependencies
#        working-directory: ./metrics-api
#        run: |
#          pip install -r requirements.txt
#
#      - name: unit tests devices-api
#        working-directory: ./devices-api
#        env:
#          PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
#        run: |
#          pytest --cov=src tests/
#
#      - name: unit tests metrics-api
#        working-directory: ./metrics-api
#        env:
#          PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
#        run: |
#          pytest --cov=src tests/
#
#      - name: unit tests rule-engine
#        working-directory: ./rule-engine
#        env:
#          PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
#        run: |
#          pytest --cov=src tests/
#
#      - name: Integration tests
#        env:
#          PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
#        run: |
#          docker compose up -d --wait metrics-api
#          docker compose up -d --wait devices-api
#          docker compose up -d --wait rule-engine
#          docker compose up -d --wait frontend
#          docker compose up -d --wait nginx
#          docker compose logs -f &
#
#          python integration_tests/test.py
  load_testing:
    runs-on: ubuntu-22.04
#    needs: test
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: setup test data
        run: |
          docker compose up -d --wait metrics-api
          docker compose up -d --wait devices-api
          docker compose up -d --wait rule-engine
          docker compose up -d --wait frontend
          docker compose up -d --wait nginx
          docker compose up -d --wait tsung
          docker compose logs -f &
          
          docker exec iot-service-devices-api-1 python /src/dao/init_database_entities.py
          docker exec iot-service-metrics-api-1 python /src/create_test_db_entities.py
#          python metrics-api/src/create_test_db_entities.py

      - name: high-rpc-few-users
        run: |
          docker exec iot-service-tsung-1 tsung -f ./high-rpc-few-users.xml start

      - name: save logs
        run: |
          TSUNG_LOG_DIR=$(docker exec iot-service-tsung-1 sh -c 'ls -td /root/.tsung/log/* | head -n 1')
          echo "Found Tsung log dir: $TSUNG_LOG_DIR"
          echo "TSUNG_LOG_DIR=$TSUNG_LOG_DIR" >> $GITHUB_ENV
          mkdir -p tsung-reports
          docker cp iot-service-tsung-1:$TSUNG_LOG_DIR ./tsung-reports/high-rpc-few-users-logs

      #--------------------------------------------------------

      - name: low-rpc-many-users
        run: |
          docker exec iot-service-tsung-1 tsung -f ./low-rpc-many-users.xml start

      - name: save logs
        run: |
          TSUNG_LOG_DIR=$(docker exec iot-service-tsung-1 sh -c 'ls -td /root/.tsung/log/* | head -n 1')
          echo "Found Tsung log dir: $TSUNG_LOG_DIR"
          echo "TSUNG_LOG_DIR=$TSUNG_LOG_DIR" >> $GITHUB_ENV
          docker cp iot-service-tsung-1:$TSUNG_LOG_DIR ./tsung-reports/low-rpc-many-users-logs

      #--------------------------------------------------------

      - name: high-rpc-many-users
        run: |
          docker exec iot-service-tsung-1 tsung -f ./high-rpc-many-users.xml start

      - name: save logs
        run: |
          TSUNG_LOG_DIR=$(docker exec iot-service-tsung-1 sh -c 'ls -td /root/.tsung/log/* | head -n 1')
          echo "Found Tsung log dir: $TSUNG_LOG_DIR"
          echo "TSUNG_LOG_DIR=$TSUNG_LOG_DIR" >> $GITHUB_ENV
          docker cp iot-service-tsung-1:$TSUNG_LOG_DIR ./tsung-reports/high-rpc-many-users-logs

      #--------------------------------------------------------

      - name: save logs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: tsung-reports
          path: tsung-reports
